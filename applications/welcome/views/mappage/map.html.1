{{extend 'layout.html'}}
<hr>
{{
    if str(request.args(0)).isdigit():
        session.state_id = (request.args(0))
        redirect(URL('map'))
    pass
}}


<head>
<script src='https://api.mapbox.com/mapbox-gl-js/v0.53.0/mapbox-gl.js'></script>
<link href='https://api.mapbox.com/mapbox-gl-js/v0.53.0/mapbox-gl.css' rel='stylesheet' />
</head>

<style type='text/css'>
#info {
display: block;
position: relative;
margin: 0px auto;
width: 50%;
padding: 10px;
border: none;
border-radius: 3px;
font-size: 12px;
text-align: center;
color: #222;
background: #fff;
}
</style>

<div id='map' style='width: 1125px; height: 550px; margin-left: 105px;' ></div>

<script>
mapboxgl.accessToken = 'pk.eyJ1Ijoid2NoZXJyeTIiLCJhIjoiY2p1MGJhZWdmMXBtMDQzcnprZzM3ZHNqaiJ9.xM3fgL3OLZ-AOCksXBDarQ';
var map = new mapboxgl.Map({
container: 'map',
style: 'mapbox://styles/mapbox/navigation-guidance-night-v2',
minZoom: 3.7,
maxZoom: 3.7,
center: [-96.4,38.02]
});
map.dragRotate.disable();
map.dragPan.disable();
var hoveredStateId =  null;
var clickedStateId = null;
    map.on('load', function () {
map.addSource("states", {
"type": "geojson",
"data": "https://docs.mapbox.com/mapbox-gl-js/assets/us_states.geojson"
});

// The feature-state dependent fill-opacity expression will render the hover effect
// when a feature's hover state is set to true.
map.addLayer({
"id": "state-fills",
"type": "fill",
"source": "states",
"layout": {},
"paint": {
"fill-color": "#627BC1",
"fill-opacity": ["case",
["boolean", ["feature-state", "hover"], false],
.5,
0
]
}
});

map.addLayer({
"id": "clicked-state-fills",
"type": "fill",
"source": "states",
"layout": {},
"paint": {
"fill-color": "#627BC1",
"fill-opacity": ["case",
["boolean", ["feature-state", "click"], false],
.5,
0
]
}
});



// When the user moves their mouse over the state-fill layer, we'll update the
// feature state for the feature under the mouse.
map.on("mousemove", "state-fills", function(e) {
if (e.features.length > 0) {
if (hoveredStateId) {
map.setFeatureState({source: 'states', id: hoveredStateId}, { hover: false});
}
hoveredStateId = e.features[0].id;
map.setFeatureState({source: 'states', id: hoveredStateId}, { hover: true});
}
});

// When the mouse leaves the state-fill layer, update the feature state of the
// previously hovered feature.
map.on("mouseleave", "state-fills", function() {
if (hoveredStateId) {
map.setFeatureState({source: 'states', id: hoveredStateId}, { hover: false});
}
hoveredStateId =  null;
});

map.on("click", "clicked-state-fills", function(e) {
if (e.features.length > 0) {
if (clickedStateId) {
map.setFeatureState({source: 'states', id: clickedStateId}, { click: false});
}
clickedStateId = e.features[0].id;
map.setFeatureState({source: 'states', id: clickedStateId}, { click: true});
document.getElementById('clickedState').innerHTML = clickedStateId ;
}

window.location = "https://utahgroup.pythonanywhere.com/welcome/mappage/map/" + clickedStateId;

});


});

</script>


<p>
    sId = {{=sId}}, stateName = {{=stateName}}, sTxt = {{=sTxt}}, session.stateName = {{=session.stateName}}
</p>

<h1 style="text-align: center; margin-top: 50px;"> State is {{=stateName}} </h1>

<div align="center">
{{ for state in states: }}
    <div style="text-align: center; margin: 10px; width: 50%; border: 1px dashed black; background-color : #E5F6F3;" class='row';>
        <p>
            &emsp;<b>Datetime :</b> {{=state[0]}} &emsp;<b>Shape :</b> {{=state[1]}} &emsp;<b>Duration :</b> {{=state[2]}}
        </p>
    </div>
{{ pass }}
</div>


<pre id = 'clickedState'></pre>
